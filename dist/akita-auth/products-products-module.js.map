{"version":3,"sources":["webpack:///./src/app/products/product/product.component.html","webpack:///./src/app/products/product/product.component.ts","webpack:///./src/app/products/products.component.html","webpack:///./src/app/products/products.component.ts","webpack:///./src/app/products/products.mocks.ts","webpack:///./src/app/products/products.module.ts","webpack:///./src/app/products/products.routing.module.ts","webpack:///./src/app/products/state/products.service.ts"],"names":[],"mappings":"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","file":"products-products-module.js","sourcesContent":["module.exports = \"<div class=\\\"card p-width\\\">\\n  <div class=\\\"card-image pointer\\\" [routerLink]=\\\"['product', product.id]\\\">\\n    <img src=\\\"http://via.placeholder.com/359x269?text={{product.title}}\\\">\\n  </div>\\n  <div class=\\\"card-content pointer\\\" [routerLink]=\\\"['product', product.id]\\\">\\n    <p class=\\\"mbb\\\">Price: <b>{{product.price}}$</b></p>\\n    <p>{{product.description}}</p>\\n  </div>\\n  <div class=\\\"card-action flex flex-end\\\">\\n    <button class=\\\"btn waves-effect waves-light cyan lighten-2 mr\\\" (click)=\\\"add.emit(product)\\\">\\n      <i class=\\\"material-icons\\\">exposure_plus_1</i>\\n    </button>\\n    <button class=\\\"btn waves-effect waves-light blue-grey lighten-3\\\" (click)=\\\"subtract.emit(product)\\\">\\n      <i class=\\\"material-icons\\\">exposure_neg_1</i>\\n    </button>\\n  </div>\\n</div>\"","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Product } from '../state/products.model';\n\n@Component({\n  selector: 'app-product',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: `./product.component.html`\n})\nexport class ProductComponent {\n  @Input() product: Product;\n  @Output() add = new EventEmitter<Product>();\n  @Output() subtract = new EventEmitter<Product>();\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <h4>\\n    Products\\n  </h4>\\n  <h5>\\n    Welcome to products\\n  </h5>\\n  <div class=\\\"content\\\">\\n\\n    <h6 class=\\\"grey-text flex align-center\\\">\\n      <i class=\\\"material-icons\\\">view_list</i>\\n      Products\\n    </h6>\\n\\n    <ng-container *ngIf=\\\"!(loading$ | async); else loadingTpl\\\">\\n\\n      <!--Sorting-->\\n      <div class=\\\"col s12\\\">\\n        <label>Sort by</label>\\n        <select class=\\\"browser-default\\\" [formControl]=\\\"sort\\\">\\n          <option value=\\\"title\\\">Name</option>\\n          <option value=\\\"price\\\">Price</option>\\n        </select>\\n      </div>\\n\\n      <!--Search Input-->\\n      <div class=\\\"input-field\\\">\\n        <i class=\\\"material-icons prefix\\\">search</i>\\n        <input placeholder=\\\"Search Product..\\\" [formControl]=\\\"search\\\">\\n      </div>\\n\\n\\n      <!--Products List-->\\n      <div class=\\\"mt flex\\\">\\n        <app-product *ngFor=\\\"let product of (products$ | async)\\\" (add)=\\\"add($event)\\\" (subtract)=\\\"subtract($event)\\\"\\n          [product]=\\\"product\\\">\\n        </app-product>\\n      </div>\\n\\n    </ng-container>\\n\\n    <!--Spinner-->\\n    <ng-template #loadingTpl>\\n      <div class=\\\"progress\\\">\\n        <div class=\\\"indeterminate\\\"></div>\\n      </div>\\n    </ng-template>\\n\\n  </div>\\n</div>\"","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { untilDestroyed } from 'ngx-take-until-destroy';\nimport { combineLatest, Observable } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\nimport { CartService } from '../cart/state/cart.service';\nimport { Product } from './state/products.model';\nimport { ProductsQuery } from './state/products.query';\nimport { ProductsService } from './state/products.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: `./products.component.html`\n})\nexport class ProductsComponent implements OnInit, OnDestroy {\n  products$: Observable<Product[]>;\n  loading$: Observable<boolean>;\n  search = new FormControl();\n  sort = new FormControl('title');\n\n  constructor(\n    private productsService: ProductsService,\n    private cartService: CartService,\n    private productsQuery: ProductsQuery\n  ) {}\n\n  ngOnInit() {\n    this.productsService\n      .get()\n      .pipe(untilDestroyed(this))\n      .subscribe();\n    this.loading$ = this.productsQuery.selectLoading();\n\n    this.products$ = combineLatest(\n      this.search.valueChanges.pipe(startWith('')),\n      this.sort.valueChanges.pipe(startWith('title'))\n    ).pipe(switchMap(([term, sortBy]) => this.productsQuery.getProducts(term, sortBy as keyof Product)));\n  }\n\n  add({ id }: Product) {\n    this.cartService.add(id);\n  }\n\n  subtract({ id }: Product) {\n    this.cartService.subtract(id);\n  }\n\n  ngOnDestroy() {}\n}\n","export const products = [\n  {\n    id: 3,\n    title: 'Rx',\n    description: 'Is a set of libraries to compose asynchronous and event-based programs using observable collections and Array style composition in JavaScript',\n    price: 30\n  },\n  {\n    id: 1,\n    title: 'JavaScript',\n    description: 'JavaScript, often abbreviated as JS, is a high-level, interpreted programming language.',\n    price: 10\n  },\n  {\n    id: 2,\n    title: 'Angular',\n    description: 'Learn one way to build applications with Angular and reuse your code and abilities to build apps for any deployment target.',\n    price: 20\n  }\n];\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { ProductComponent } from './product/product.component';\nimport { ProductsComponent } from './products.component';\nimport { ProductsRoutingModule } from './products.routing.module';\n\nconst publicApi = [ProductsComponent, ProductComponent];\n\n@NgModule({\n  imports: [SharedModule, ProductsRoutingModule],\n  declarations: [publicApi],\n  exports: [publicApi]\n})\nexport class ProductsModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProductComponent } from './product/product.component';\nimport { ProductsComponent } from './products.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProductsComponent,\n    children: [\n      {\n        path: 'product/:id',\n        component: ProductComponent\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProductsRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { ID } from '@datorama/akita';\nimport { Observable, of, timer } from 'rxjs';\nimport { map, mapTo } from 'rxjs/operators';\nimport { products } from '../products.mocks';\nimport { ProductsQuery } from './products.query';\nimport { ProductsStore } from './products.store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  constructor(private productsStore: ProductsStore, private productsQuery: ProductsQuery) {}\n\n  get(): Observable<void> {\n    const request = timer(500).pipe(\n      mapTo(products),\n      map(response => this.productsStore.set(response))\n    );\n\n    return this.productsQuery.getHasCache() ? of() : request;\n  }\n\n  getProduct(id: ID) {\n    const product = products.find(product => product.id === +id);\n\n    return timer(500).pipe(\n      mapTo(product),\n      map(() => this.productsStore.add(product))\n    );\n  }\n}\n"],"sourceRoot":""}